worker_processes 1;

error_log logs/error.log;
error_log logs/error.log notice;
error_log logs/error.log info;

pid logs/nginx.pid;

events {
    worker_connections 1024;
}
env REDIS_PASSWORD;
env BTC_PASSWORD;

http {
    server_tokens off; # Hide server information
    resolver 127.0.0.11;  # FOR DOCKER COMPOSE ONLY
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;

        location / {
            # For Cloudflare
            if ($request_method = GET) {
                return 200 'OK';
            }
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                -- Timeout in milliseconds for connection
                local timeout = 3000

                -- Redis settings
                local redis_host = "redis"
                local redis_port = 6379
                local redis_password = os.getenv("REDIS_PASSWORD")

                -- Authorization header for Bitcoin Core
                local bitcoin_core_auth = "Basic bmFhczpiYXJlbWV0YWw="

                -- Allowed Bitcoin Core methods
                local allowed_methods = {
                    "bb_getaddress",
                    "bb_getutxos",
                    "bb_getxpub",
                    "decoderawtransaction",
                    "decodescript",
                    "estimatesmartfee",
                    "getbestblockhash",
                    "getblock",
                    "getblockchaininfo",
                    "getblockcount",
                    "getblockhash",
                    "getblockheader",
                    "getblockstats",
                    "getchaintips",
                    "getchaintxstats",
                    "getconnectioncount",
                    "getdifficulty",
                    "getindexinfo",
                    "getmemoryinfo",
                    "getmempoolancestors",
                    "getmempooldescendants",
                    "getmempoolinfo",
                    "getrawmempool",
                    "getrawtransaction",
                    "gettxout",
                    "gettxoutproof",
                    "gettxoutsetinfo",
                    "qn_addressBalance",
                    "sendrawtransaction",
                    "testmempoolaccept",
                    "validateaddress",
                    "verifymessage"
                }

                red:set_timeouts(timeout, timeout, timeout) 

                -- Connect to Redis
                local ok, err = red:connect(redis_host, redis_port)
                if not ok then
                    ngx.log(ngx.NOTICE,"Failed to connect to Redis: ", err)
                    return
                end

                -- AUTHENTICATE WITH REDIS --
                local res, err = red:auth(redis_password)
                if not res then
                    ngx.log(ngx.ERR, "failed to authenticate: ", err)
                    return
                end

                ngx.log(ngx.NOTICE,"Connected to Redis")

                -- Extract API key from URI
                local api_key = string.match(ngx.var.uri, "^/([^/]+)")
                if api_key == nil or api_key == "" then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.header.content_type = "application/json; charset=utf-8"
                    ngx.log(ngx.WARN, "No API key specified for this request")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                else
                    -- Checks for API key presence in Redis
                    local quota, err = red:hget("APIKEYS", api_key)
                    ngx.log(ngx.NOTICE, "API KEY Quota:", quota)
                    if quota and quota ~= ngx.null then
                        ngx.log(ngx.NOTICE, "API key found in Redis")
                        -- Check if the quota is less than 1
                        if tonumber(quota) < 1 then
                            ngx.log(ngx.WARN, "Quota exceeded for this API key")
                            ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                            ngx.header.content_type = "application/json; charset=utf-8"
                            ngx.say('{"error": "Quota exceeded"}')
                            ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                        end
                    else
                        ngx.log(ngx.WARN, "API key NOT found in Redis")
                        ngx.status = ngx.HTTP_UNAUTHORIZED
                        ngx.header.content_type = "application/json; charset=utf-8"
                        ngx.say('{"error": "Invalid API key"}')
                        ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    end
                end

                -- Extract method from the request body
                local method = nil
                ngx.req.read_body()
                local body_data = ngx.req.get_body_data()
                -- ngx.log(ngx.WARN, "Body is:", body_data)
                if body_data then
                    method = string.match(body_data, '"method"%s*:%s*"(%w+)"')
                    -- ngx.log(ngx.WARN, "Method is:", method)
                end


                -- Check if the method is allowed
                local function contains(table, val)
                    for k, v in ipairs(table) do
                        if v == val then
                            return true
                        end
                    end
                    return false
                end
                if not method or not contains(allowed_methods, method) then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.header.content_type = "application/json; charset=utf-8"
                    ngx.log(ngx.WARN, "Method not allowed: ", method)
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                -- Attempt to fetch cached response
                ngx.req.read_body()
                local cache_key = ngx.req.get_body_data()
                local cache_value, err = red:get(cache_key)

                local filter = string.find(cache_key, "latest")

                if not filter and cache_value ~= ngx.null and not err then
                    ngx.log(ngx.WARN, "Cache HIT")
                    -- ngx.log(ngx.INFO, "Cache content: ", cache_value)
                    -- Decrement quota counter
                    local quotainc, err = red:hincrby("APIKEYS", api_key, -1)
                    if err then
                        ngx.log(ngx.ERR, "Failed to decrement quota counter: ", err)
                        return
                    end
                    ngx.log(ngx.INFO, "Quota counter decreased to: ", quotainc)
                    local newquota, err = red:hget("APIKEYS", api_key)
                    ngx.log(ngx.NOTICE, "API KEY Quota:", newquota)
                    -- Return response with content
                    ngx.say(cache_value)
                    ngx.exit(ngx.OK)
                end

                -- Set authorization header
                ngx.req.set_header("Authorization", bitcoin_core_auth)

                -- Capture response from Bitcoin Core
                local res = ngx.location.capture("/", {
                    method = ngx.HTTP_POST,
                    body = ngx.req.get_body_data()
                })

                -- If Bitcoin Core responds with 200, cache the response
                if res then
                    if res.status == ngx.HTTP_OK then
                        ngx.log(ngx.WARN, "Bitcoin Core returned 200")
                        
                        if not filter then
                            ok, err = red:set(cache_key, res.body, "EX", 86400)
                            ngx.log(ngx.WARN, "Cache set")
                        end

                        if not ok then
                            ngx.say("Failed to set cache: ", err)
                            return
                        end

                        -- Decrement quota counter
                        local quotainc, err = red:hincrby("APIKEYS", api_key, -1)
                        if err then
                            ngx.log(ngx.ERR, "Failed to decrement quota counter: ", err)
                            return
                        end
                        ngx.log(ngx.INFO, "Quota counter decreased to: ", quotainc)
                        local newquota, err = red:hget("APIKEYS", api_key)
                        ngx.log(ngx.NOTICE, "API KEY Quota:", newquota)
                        -- Return response with content
                        ngx.say(res.body)
                        ngx.exit(ngx.OK)
                    else
                        ngx.log(ngx.NOTICE, "Failed to connect with status: ", res.status)
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                else
                    ngx.log(ngx.ERR, "Failed to capturelocation")
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }
            
            proxy_pass http://bitcoin-core:8332;
        }
    }
}